{
  "metadata": {
    "title": "Week 5 Practice - Movies Dataset",
    "description": "Advanced JOIN operations, subqueries, and Common Table Expressions (CTEs) using real-world movie data with ratings, languages, and temporal information",
    "week": 5,
    "total_exercises": 5,
    "database": "data_movies_dataset.db",
    "focus_topics": [
      "SELF JOIN",
      "Subqueries (scalar, WHERE, SELECT, FROM)",
      "CTEs (WITH clause)",
      "Advanced data analysis",
      "Real-world data quality handling"
    ],
    "generated_date": "2025-01-15T18:15:00.000000",
    "difficulty_levels": [
      "Easy",
      "Medium",
      "Hard"
    ],
    "syllabus_topics": [
      "RIGHT JOIN",
      "FULL OUTER JOIN",
      "SELF JOIN",
      "Subqueries (scalar, in WHERE, SELECT, FROM)",
      "Introduction to CTEs (WITH clause)"
    ],
    "learning_objectives": [
      "Utilize different JOIN types",
      "Implement SELF JOINs",
      "Write subqueries",
      "Start using CTEs for readability"
    ],
    "schema_tables": [
      "decades",
      "languages",
      "movie_languages",
      "movie_ratings",
      "movies",
      "ratings"
    ],
    "total_records": 39377,
    "test_results": {
      "total_exercises": 5,
      "working_exercises": 5,
      "failed_exercises": 0,
      "success_rate": 100.0,
      "total_execution_time": 0.186,
      "average_execution_time": 0.037,
      "test_date": "2025-07-16 16:40:56"
    }
  },
  "exercises": [
    {
      "id": 1,
      "title": "Exceptional Movies Among Excellent Ratings",
      "statement": "Identify the standout performers among movies with 'Excellent' ratings. Find movies that are significantly more popular than the typical excellent movie - specifically those with popularity at least 500 points above the average for all excellent-rated movies. Display the movie title, popularity score, rating category, and the amount by which they exceed the excellent average. Order results by the excess amount in descending order.",
      "solution": "SELECT \n    m.title,\n    m.popularity,\n    r.rating_category,\n    ROUND(m.popularity - (\n        SELECT AVG(m2.popularity)\n        FROM movies m2\n        JOIN movie_ratings mr2 ON m2.movie_id = mr2.movie_id\n        JOIN ratings r2 ON mr2.rating_id = r2.rating_id\n        WHERE r2.rating_category = 'Excellent'\n            AND m2.popularity IS NOT NULL\n    ), 2) AS above_average_by\nFROM movies m\nJOIN movie_ratings mr ON m.movie_id = mr.movie_id\nJOIN ratings r ON mr.rating_id = r.rating_id\nWHERE r.rating_category = 'Excellent'\n    AND m.popularity IS NOT NULL\n    AND m.popularity > (\n        SELECT AVG(m2.popularity) + 500\n        FROM movies m2\n        JOIN movie_ratings mr2 ON m2.movie_id = mr2.movie_id\n        JOIN ratings r2 ON mr2.rating_id = r2.rating_id\n        WHERE r2.rating_category = 'Excellent'\n            AND m2.popularity IS NOT NULL\n    )\nORDER BY above_average_by DESC;",
      "topics": [
        "Scalar subquery",
        "Correlated subquery",
        "AVG function",
        "Multiple JOINs",
        "Threshold filtering"
      ],
      "difficulty": "Medium",
      "result": {
        "working": true,
        "execution_time": 0.012,
        "row_count": 4,
        "columns": [
          "title",
          "popularity",
          "rating_category",
          "above_average_by"
        ],
        "sample_results": [
          {
            "title": "Spider-Man: No Way Home",
            "popularity": "5083.954",
            "rating_category": "Excellent",
            "above_average_by": "5007.5"
          },
          {
            "title": "The Batman",
            "popularity": "3827.658",
            "rating_category": "Excellent",
            "above_average_by": "3751.21"
          },
          {
            "title": "Sing 2",
            "popularity": "1112.9",
            "rating_category": "Excellent",
            "above_average_by": "1036.45"
          }
        ],
        "error": null
      }
    },
    {
      "id": 2,
      "title": "Decade Champions",
      "statement": "Determine which movie achieved the highest popularity in each decade. Your analysis should span from the 1980s through the 2020s, showing the decade name, the champion movie's title, and its popularity score. Only include decades that have movies in the database. Results should be ordered chronologically by decade.\n\n**Helpful Tip:** The SUBSTR function extracts part of a text string. Syntax: `SUBSTR(text, start_position, length)`. Examples: `SUBSTR('2023-12-25', 6, 2)` returns '12' (month), `SUBSTR('Hello World', 1, 5)` returns 'Hello', `SUBSTR('ABC123DEF', 4, 3)` returns '123'. When extracting from dates, you can get specific parts like years or months.",
      "solution": "SELECT \n    d.decade_name,\n    m.title AS most_popular_movie,\n    m.popularity AS max_popularity\nFROM decades d\nJOIN movies m ON CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) BETWEEN d.decade_start AND d.decade_end\nWHERE m.popularity IS NOT NULL\n    AND SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n    AND m.popularity = (\n        SELECT MAX(m2.popularity)\n        FROM movies m2\n        WHERE CAST(SUBSTR(m2.release_date, 1, 4) AS INTEGER) BETWEEN d.decade_start AND d.decade_end\n            AND m2.popularity IS NOT NULL\n            AND SUBSTR(m2.release_date, 1, 4) ~ '^[0-9]{4}$'\n    )\nORDER BY d.decade_start;",
      "topics": [
        "Table JOIN",
        "Reference table usage",
        "MAX function",
        "Correlated subquery",
        "Date range filtering"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.01,
        "row_count": 5,
        "columns": [
          "decade_name",
          "most_popular_movie",
          "max_popularity"
        ],
        "sample_results": [
          {
            "decade_name": "1980s",
            "most_popular_movie": "Exploits of a Young Don Juan",
            "max_popularity": "396.948"
          },
          {
            "decade_name": "1990s",
            "most_popular_movie": "Toy Story",
            "max_popularity": "171.714"
          },
          {
            "decade_name": "2000s",
            "most_popular_movie": "Avatar",
            "max_popularity": "297.357"
          }
        ],
        "error": null
      }
    },
    {
      "id": 3,
      "title": "Recent Movie Popularity Extremes",
      "statement": "Analyze popularity extremes in recent movie releases from 2015 to 2025. For each year, identify both the most and least popular movies released. Your result should show the release year, both movie titles with their popularity scores, and calculate the popularity gap between them. Only include years that released at least 5 movies. Results should be ordered chronologically by year.",
      "solution": "SELECT \n    CAST(SUBSTR(m1.release_date, 1, 4) AS INTEGER) AS release_year,\n    m1.title AS most_popular_movie,\n    m1.popularity AS highest_popularity,\n    m2.title AS least_popular_movie,\n    m2.popularity AS lowest_popularity,\n    (m1.popularity - m2.popularity) AS popularity_gap\nFROM movies m1\nJOIN movies m2 ON SUBSTR(m1.release_date, 1, 4) = SUBSTR(m2.release_date, 1, 4)\n    AND m1.movie_id != m2.movie_id\nWHERE m1.popularity = (\n    SELECT MAX(m3.popularity)\n    FROM movies m3 \n    WHERE SUBSTR(m3.release_date, 1, 4) = SUBSTR(m1.release_date, 1, 4)\n        AND m3.popularity IS NOT NULL\n)\nAND m2.popularity = (\n    SELECT MIN(m4.popularity)\n    FROM movies m4 \n    WHERE SUBSTR(m4.release_date, 1, 4) = SUBSTR(m2.release_date, 1, 4)\n        AND m4.popularity IS NOT NULL\n        AND m4.popularity > 0\n)\nAND (\n    SELECT COUNT(*)\n    FROM movies m5\n    WHERE SUBSTR(m5.release_date, 1, 4) = SUBSTR(m1.release_date, 1, 4)\n) >= 5\nAND m1.popularity IS NOT NULL\nAND m2.popularity IS NOT NULL\nAND SUBSTR(m1.release_date, 1, 4) ~ '^[0-9]{4}$'\nAND CAST(SUBSTR(m1.release_date, 1, 4) AS INTEGER) BETWEEN 2015 AND 2025\nORDER BY release_year;",
      "topics": [
        "SELF JOIN",
        "Comparison operators",
        "Calculated fields",
        "NULL handling",
        "Date filtering"
      ],
      "difficulty": "Medium",
      "result": {
        "working": true,
        "execution_time": 0.151,
        "row_count": 9,
        "columns": [
          "release_year",
          "most_popular_movie",
          "highest_popularity",
          "least_popular_movie",
          "lowest_popularity",
          "popularity_gap"
        ],
        "sample_results": [
          {
            "release_year": "2015",
            "most_popular_movie": "Dragon Ball Z: Resurrection 'F'",
            "highest_popularity": "220.049",
            "least_popular_movie": "The Atticus Institute",
            "lowest_popularity": "13.364",
            "popularity_gap": "206.685"
          },
          {
            "release_year": "2016",
            "most_popular_movie": "Doctor Strange",
            "highest_popularity": "228.266",
            "least_popular_movie": "The Offering",
            "lowest_popularity": "13.355",
            "popularity_gap": "214.911"
          },
          {
            "release_year": "2017",
            "most_popular_movie": "Coco",
            "highest_popularity": "210.527",
            "least_popular_movie": "Our Souls at Night",
            "lowest_popularity": "13.378",
            "popularity_gap": "197.149"
          }
        ],
        "error": null
      }
    },
    {
      "id": 4,
      "title": "Cinema Language Success Analysis",
      "statement": "Evaluate the success of different movie languages in our database. Focus on languages that have produced at least 20 movies, and calculate their movie count, average popularity, and average rating. Rank these languages by both movie count and average popularity, then categorize them into performance tiers (Top 25%, Upper 25%, Lower 25%, Bottom 25%) based on popularity. Display all statistics with rankings ordered by movie count (highest first).",
      "solution": "WITH language_stats AS (\n    SELECT \n        l.language_name,\n        COUNT(m.movie_id) AS movie_count,\n        ROUND(AVG(m.popularity), 2) AS avg_popularity,\n        ROUND(AVG(r.rating_score), 2) AS avg_rating\n    FROM languages l\n    JOIN movie_languages ml ON l.language_id = ml.language_id\n    JOIN movies m ON ml.movie_id = m.movie_id\n    LEFT JOIN movie_ratings mr ON m.movie_id = mr.movie_id\n    LEFT JOIN ratings r ON mr.rating_id = r.rating_id\n    WHERE m.popularity IS NOT NULL\n    GROUP BY l.language_name\n    HAVING COUNT(m.movie_id) >= 20\n),\nlanguage_rankings AS (\n    SELECT \n        language_name,\n        movie_count,\n        avg_popularity,\n        avg_rating,\n        ROW_NUMBER() OVER (ORDER BY movie_count DESC) AS count_rank,\n        ROW_NUMBER() OVER (ORDER BY avg_popularity DESC) AS popularity_rank,\n        NTILE(4) OVER (ORDER BY avg_popularity) AS popularity_quartile\n    FROM language_stats\n)\nSELECT \n    language_name,\n    movie_count,\n    avg_popularity,\n    avg_rating,\n    count_rank,\n    popularity_rank,\n    CASE popularity_quartile\n        WHEN 4 THEN 'Top 25%'\n        WHEN 3 THEN 'Upper 25%'\n        WHEN 2 THEN 'Lower 25%'\n        WHEN 1 THEN 'Bottom 25%'\n    END AS popularity_tier\nFROM language_rankings\nORDER BY count_rank;",
      "topics": [
        "CTE (WITH clause)",
        "Window functions",
        "ROW_NUMBER",
        "NTILE",
        "CASE WHEN",
        "Multi-step analysis"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.008,
        "row_count": 15,
        "columns": [
          "language_name",
          "movie_count",
          "avg_popularity",
          "avg_rating",
          "count_rank",
          "popularity_rank",
          "popularity_tier"
        ],
        "sample_results": [
          {
            "language_name": "English",
            "movie_count": "8970",
            "avg_popularity": "43.15",
            "avg_rating": "6.37",
            "count_rank": "1",
            "popularity_rank": "3",
            "popularity_tier": "Top 25%"
          },
          {
            "language_name": "Japanese",
            "movie_count": "679",
            "avg_popularity": "39.54",
            "avg_rating": "6.94",
            "count_rank": "2",
            "popularity_rank": "4",
            "popularity_tier": "Upper 25%"
          },
          {
            "language_name": "French",
            "movie_count": "357",
            "avg_popularity": "37.11",
            "avg_rating": "6.39",
            "count_rank": "3",
            "popularity_rank": "7",
            "popularity_tier": "Upper 25%"
          }
        ],
        "error": null
      }
    },
    {
      "id": 5,
      "title": "Movie Industry Evolution Report",
      "statement": "Generate a comprehensive decade-by-decade analysis of movie industry trends. For each decade that has at least 50 movies, calculate the total number of movies produced, average popularity, and count of unique languages used. Additionally, identify the most common rating category across all movies. Present results showing decade name, movie statistics, language diversity, and the overall most common rating, ordered chronologically by decade.",
      "solution": "WITH decade_movie_stats AS (\n    SELECT \n        d.decade_name,\n        COUNT(m.movie_id) AS total_movies,\n        ROUND(AVG(m.popularity), 2) AS avg_popularity\n    FROM decades d\n    JOIN movies m ON CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) BETWEEN d.decade_start AND d.decade_end\n    WHERE m.popularity IS NOT NULL\n        AND SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n    GROUP BY d.decade_name, d.decade_start\n    HAVING COUNT(m.movie_id) >= 50\n),\ndecade_language_diversity AS (\n    SELECT \n        d.decade_name,\n        COUNT(DISTINCT l.language_id) AS unique_languages\n    FROM decades d\n    JOIN movies m ON CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) BETWEEN d.decade_start AND d.decade_end\n    JOIN movie_languages ml ON m.movie_id = ml.movie_id\n    JOIN languages l ON ml.language_id = l.language_id\n    WHERE SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n    GROUP BY d.decade_name\n),\nrating_distribution AS (\n    SELECT \n        r.rating_category,\n        COUNT(m.movie_id) AS movie_count\n    FROM ratings r\n    JOIN movie_ratings mr ON r.rating_id = mr.rating_id\n    JOIN movies m ON mr.movie_id = m.movie_id\n    GROUP BY r.rating_category\n)\nSELECT \n    dms.decade_name,\n    dms.total_movies,\n    dms.avg_popularity,\n    dld.unique_languages,\n    (SELECT rating_category FROM rating_distribution ORDER BY movie_count DESC LIMIT 1) AS most_common_rating\nFROM decade_movie_stats dms\nJOIN decade_language_diversity dld ON dms.decade_name = dld.decade_name\nORDER BY dms.decade_name;",
      "topics": [
        "Multiple CTEs",
        "Complex JOIN operations",
        "Aggregate functions",
        "Subqueries in SELECT",
        "Industry trend analysis"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.005,
        "row_count": 5,
        "columns": [
          "decade_name",
          "total_movies",
          "avg_popularity",
          "unique_languages",
          "most_common_rating"
        ],
        "sample_results": [
          {
            "decade_name": "1980s",
            "total_movies": "587",
            "avg_popularity": "23.04",
            "unique_languages": "16",
            "most_common_rating": "Good"
          },
          {
            "decade_name": "1990s",
            "total_movies": "993",
            "avg_popularity": "25.53",
            "unique_languages": "16",
            "most_common_rating": "Good"
          },
          {
            "decade_name": "2000s",
            "total_movies": "1983",
            "avg_popularity": "29.51",
            "unique_languages": "22",
            "most_common_rating": "Good"
          }
        ],
        "error": null
      }
    }
  ]
}
