{
  "metadata": {
    "title": "Week 5 Practice - Movies Dataset",
    "description": "Advanced JOIN operations, subqueries, and Common Table Expressions (CTEs) using real-world movie data with ratings, languages, and temporal information",
    "week": 5,
    "total_exercises": 6,
    "database": "data_movies_dataset.db",
    "focus_topics": [
      "RIGHT JOIN",
      "FULL OUTER JOIN",
      "SELF JOIN",
      "Subqueries (scalar, WHERE, SELECT, FROM)",
      "CTEs (WITH clause)",
      "Advanced data analysis",
      "Real-world data quality handling"
    ],
    "generated_date": "2025-01-15T17:00:00.000000",
    "difficulty_levels": [
      "Easy",
      "Medium",
      "Hard"
    ],
    "syllabus_topics": [
      "RIGHT JOIN",
      "FULL OUTER JOIN",
      "SELF JOIN",
      "Subqueries (scalar, in WHERE, SELECT, FROM)",
      "Introduction to CTEs (WITH clause)"
    ],
    "learning_objectives": [
      "Utilize different JOIN types",
      "Implement SELF JOINs",
      "Write subqueries",
      "Start using CTEs for readability"
    ],
    "schema_tables": [
      "decades",
      "languages",
      "movie_languages",
      "movie_ratings",
      "movies",
      "ratings"
    ],
    "total_records": 39377,
    "test_results": {
      "total_exercises": 6,
      "working_exercises": 6,
      "failed_exercises": 0,
      "success_rate": 100.0,
      "total_execution_time": 0.359,
      "average_execution_time": 0.06,
      "test_date": "2025-07-15 17:43:58"
    }
  },
  "exercises": [
    {
      "id": 1,
      "title": "Languages with Limited Movie Selection - RIGHT JOIN",
      "statement": "Find all languages that appear as the primary language in fewer than 10 movies in our database. Use a RIGHT JOIN to ensure all languages are considered, even those with zero movies. Show the language code, language name, and the actual count of movies for each language. Filter out invalid language codes that contain URLs or are blank. Order by movie count ascending, then by language code.",
      "solution": "SELECT \n    l.language_code,\n    l.language_name,\n    COUNT(ml.movie_id) AS movie_count\nFROM movie_languages ml\nRIGHT JOIN languages l ON ml.language_id = l.language_id\nWHERE l.language_code NOT LIKE '%http%'\n    AND l.language_code != ''\n    AND LENGTH(l.language_code) <= 3\nGROUP BY l.language_id, l.language_code, l.language_name\nHAVING COUNT(ml.movie_id) < 10\nORDER BY movie_count ASC, l.language_code;",
      "topics": [
        "RIGHT JOIN",
        "COUNT aggregation",
        "GROUP BY",
        "HAVING clause",
        "ORDER BY"
      ],
      "difficulty": "Easy",
      "result": {
        "working": true,
        "execution_time": 0.004,
        "row_count": 23,
        "columns": [
          "language_code",
          "language_name",
          "movie_count"
        ],
        "sample_results": [
          {
            "language_code": "et",
            "language_name": "Other Language",
            "movie_count": "0"
          },
          {
            "language_code": "bn",
            "language_name": "Other Language",
            "movie_count": "1"
          },
          {
            "language_code": "ca",
            "language_name": "Other Language",
            "movie_count": "1"
          }
        ],
        "error": null
      }
    },
    {
      "id": 2,
      "title": "Year's Most vs Least Popular Movies - SELF JOIN",
      "statement": "For each year, find the most popular and least popular movies released that year. Use a SELF JOIN to compare movies within the same release year. Show the year, most popular movie title and score, least popular movie title and score, and the popularity gap between them. Only include years with at least 10 movies and limit to 10 results ordered by popularity gap descending.",
      "solution": "SELECT \n    CAST(SUBSTR(m1.release_date, 1, 4) AS INTEGER) AS release_year,\n    m1.title AS most_popular_movie,\n    m1.popularity AS highest_popularity,\n    m2.title AS least_popular_movie,\n    m2.popularity AS lowest_popularity,\n    (m1.popularity - m2.popularity) AS popularity_gap\nFROM movies m1\nJOIN movies m2 ON SUBSTR(m1.release_date, 1, 4) = SUBSTR(m2.release_date, 1, 4)\n    AND m1.movie_id != m2.movie_id\nWHERE m1.popularity = (\n    SELECT MAX(m3.popularity)\n    FROM movies m3 \n    WHERE SUBSTR(m3.release_date, 1, 4) = SUBSTR(m1.release_date, 1, 4)\n        AND m3.popularity IS NOT NULL\n)\nAND m2.popularity = (\n    SELECT MIN(m4.popularity)\n    FROM movies m4 \n    WHERE SUBSTR(m4.release_date, 1, 4) = SUBSTR(m2.release_date, 1, 4)\n        AND m4.popularity IS NOT NULL\n        AND m4.popularity > 0\n)\nAND (\n    SELECT COUNT(*)\n    FROM movies m5\n    WHERE SUBSTR(m5.release_date, 1, 4) = SUBSTR(m1.release_date, 1, 4)\n) >= 10\nAND m1.popularity IS NOT NULL\nAND m2.popularity IS NOT NULL\nAND SUBSTR(m1.release_date, 1, 4) ~ '^[0-9]{4}$'\nORDER BY popularity_gap DESC\nLIMIT 10;",
      "topics": [
        "SELF JOIN",
        "Comparison operators",
        "Calculated fields",
        "NULL handling"
      ],
      "difficulty": "Medium",
      "result": {
        "working": true,
        "execution_time": 0.323,
        "row_count": 10,
        "columns": [
          "release_year",
          "most_popular_movie",
          "highest_popularity",
          "least_popular_movie",
          "lowest_popularity",
          "popularity_gap"
        ],
        "sample_results": [
          {
            "release_year": "2021",
            "most_popular_movie": "Spider-Man: No Way Home",
            "highest_popularity": "5083.954",
            "least_popular_movie": "The United States vs. Billie Holiday",
            "lowest_popularity": "13.354",
            "popularity_gap": "5070.6"
          },
          {
            "release_year": "2022",
            "most_popular_movie": "The Batman",
            "highest_popularity": "3827.658",
            "least_popular_movie": "Tony Hawk: Until the Wheels Fall Off",
            "lowest_popularity": "13.446",
            "popularity_gap": "3814.212"
          },
          {
            "release_year": "2020",
            "most_popular_movie": "Chernobyl: Abyss",
            "highest_popularity": "601.958",
            "least_popular_movie": "Violent Delights",
            "lowest_popularity": "13.356",
            "popularity_gap": "588.602"
          }
        ],
        "error": null
      }
    },
    {
      "id": 3,
      "title": "Above Average Movies by Rating Category - Scalar Subquery",
      "statement": "Find movies that have above-average popularity within their specific rating category (Excellent, Very Good, Good, etc.). Use a scalar subquery to calculate the average popularity for each rating category. Show movie title, popularity, rating category, and how much above the category average they are (as `above_average_by`). Order by the difference descending and limit to 15 results.",
      "solution": "SELECT \n    m.title,\n    m.popularity,\n    r.rating_category,\n    ROUND(m.popularity - (\n        SELECT AVG(m2.popularity)\n        FROM movies m2\n        JOIN movie_ratings mr2 ON m2.movie_id = mr2.movie_id\n        JOIN ratings r2 ON mr2.rating_id = r2.rating_id\n        WHERE r2.rating_category = r.rating_category\n            AND m2.popularity IS NOT NULL\n    ), 2) AS above_average_by\nFROM movies m\nJOIN movie_ratings mr ON m.movie_id = mr.movie_id\nJOIN ratings r ON mr.rating_id = r.rating_id\nWHERE m.popularity > (\n    SELECT AVG(m2.popularity)\n    FROM movies m2\n    JOIN movie_ratings mr2 ON m2.movie_id = mr2.movie_id\n    JOIN ratings r2 ON mr2.rating_id = r2.rating_id\n    WHERE r2.rating_category = r.rating_category\n        AND m2.popularity IS NOT NULL\n)\nAND m.popularity IS NOT NULL\nORDER BY above_average_by DESC\nLIMIT 15;",
      "topics": [
        "Scalar subquery",
        "Correlated subquery",
        "AVG function",
        "Multiple JOINs"
      ],
      "difficulty": "Medium",
      "result": {
        "working": true,
        "execution_time": 0.012,
        "row_count": 15,
        "columns": [
          "title",
          "popularity",
          "rating_category",
          "above_average_by"
        ],
        "sample_results": [
          {
            "title": "Spider-Man: No Way Home",
            "popularity": "5083.954",
            "rating_category": "Excellent",
            "above_average_by": "5007.5"
          },
          {
            "title": "The Batman",
            "popularity": "3827.658",
            "rating_category": "Excellent",
            "above_average_by": "3751.21"
          },
          {
            "title": "No Exit",
            "popularity": "2618.087",
            "rating_category": "Good",
            "above_average_by": "2580.86"
          }
        ],
        "error": null
      }
    },
    {
      "id": 4,
      "title": "Top Movie by Decade - Subquery in FROM",
      "statement": "Find the most popular movie from each decade using a subquery in the FROM clause. First, create a subquery that finds the maximum popularity score for each decade (1980s, 1990s, 2000s, etc.). Then join this result back to the movies table to get the actual movie details. Show decade, movie title, and popularity score.",
      "solution": "SELECT \n    decade_popularity.decade,\n    m.title AS most_popular_movie,\n    decade_popularity.max_popularity\nFROM (\n    SELECT \n        CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's' AS decade,\n        MAX(m.popularity) AS max_popularity\n    FROM movies m\n    WHERE m.popularity IS NOT NULL\n        AND SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n        AND CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) >= 1980\n    GROUP BY CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's'\n    HAVING COUNT(m.movie_id) >= 20\n) AS decade_popularity\nJOIN movies m ON m.popularity = decade_popularity.max_popularity\nWHERE SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n    AND CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's' = decade_popularity.decade\nORDER BY decade_popularity.decade;\n\n",
      "topics": [
        "Subquery in FROM",
        "MAX function",
        "GROUP BY",
        "HAVING clause",
        "BETWEEN operator"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.005,
        "row_count": 43,
        "columns": [
          "decade",
          "most_popular_movie",
          "max_popularity"
        ],
        "sample_results": [
          {
            "decade": "1980.0s",
            "most_popular_movie": "The Shining",
            "max_popularity": "57.144"
          },
          {
            "decade": "1981.0s",
            "most_popular_movie": "Porno",
            "max_popularity": "81.954"
          },
          {
            "decade": "1982.0s",
            "most_popular_movie": "First Blood",
            "max_popularity": "52.454"
          }
        ],
        "error": null
      }
    },
    {
      "id": 5,
      "title": "Language Performance Analytics - Multi-step CTE",
      "statement": "Analyze language performance using a two-step approach with Common Table Expressions. Step 1: Calculate movie counts, average popularity, and average rating for each language that has at least 20 movies. Step 2: Rank languages by both movie count and average popularity, then assign performance tiers (Top 25%, Upper 25%, Lower 25%, Bottom 25%) based on popularity rankings. Show all statistics and tier assignments.",
      "solution": "WITH language_stats AS (\n    SELECT \n        l.language_name,\n        COUNT(m.movie_id) AS movie_count,\n        ROUND(AVG(m.popularity), 2) AS avg_popularity,\n        ROUND(AVG(r.rating_score), 2) AS avg_rating\n    FROM languages l\n    JOIN movie_languages ml ON l.language_id = ml.language_id\n    JOIN movies m ON ml.movie_id = m.movie_id\n    LEFT JOIN movie_ratings mr ON m.movie_id = mr.movie_id\n    LEFT JOIN ratings r ON mr.rating_id = r.rating_id\n    WHERE m.popularity IS NOT NULL\n    GROUP BY l.language_name\n    HAVING COUNT(m.movie_id) >= 20\n),\nlanguage_rankings AS (\n    SELECT \n        language_name,\n        movie_count,\n        avg_popularity,\n        avg_rating,\n        ROW_NUMBER() OVER (ORDER BY movie_count DESC) AS count_rank,\n        ROW_NUMBER() OVER (ORDER BY avg_popularity DESC) AS popularity_rank,\n        NTILE(4) OVER (ORDER BY avg_popularity) AS popularity_quartile\n    FROM language_stats\n)\nSELECT \n    language_name,\n    movie_count,\n    avg_popularity,\n    avg_rating,\n    count_rank,\n    popularity_rank,\n    CASE popularity_quartile\n        WHEN 4 THEN 'Top 25%'\n        WHEN 3 THEN 'Upper 25%'\n        WHEN 2 THEN 'Lower 25%'\n        WHEN 1 THEN 'Bottom 25%'\n    END AS popularity_tier\nFROM language_rankings\nORDER BY count_rank;",
      "topics": [
        "CTE (WITH clause)",
        "Window functions",
        "ROW_NUMBER",
        "NTILE",
        "CASE WHEN",
        "Multi-step analysis"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.007,
        "row_count": 15,
        "columns": [
          "language_name",
          "movie_count",
          "avg_popularity",
          "avg_rating",
          "count_rank",
          "popularity_rank",
          "popularity_tier"
        ],
        "sample_results": [
          {
            "language_name": "English",
            "movie_count": "8970",
            "avg_popularity": "43.15",
            "avg_rating": "6.37",
            "count_rank": "1",
            "popularity_rank": "3",
            "popularity_tier": "Top 25%"
          },
          {
            "language_name": "Japanese",
            "movie_count": "679",
            "avg_popularity": "39.54",
            "avg_rating": "6.94",
            "count_rank": "2",
            "popularity_rank": "4",
            "popularity_tier": "Upper 25%"
          },
          {
            "language_name": "French",
            "movie_count": "357",
            "avg_popularity": "37.11",
            "avg_rating": "6.39",
            "count_rank": "3",
            "popularity_rank": "7",
            "popularity_tier": "Upper 25%"
          }
        ],
        "error": null
      }
    },
    {
      "id": 6,
      "title": "Movie Database Insights - Multiple CTEs",
      "statement": "Use multiple Common Table Expressions to analyze different aspects of the movie database. Create three separate CTEs: 1) Calculate rating distribution (count of movies per rating category), 2) Find decade trends (average popularity per decade for decades with 50+ movies), and 3) Identify language diversity (count of unique languages per decade). Show the complete decade trends and language diversity data, along with summary insights.",
      "solution": "WITH rating_distribution AS (\n    SELECT \n        r.rating_category,\n        COUNT(m.movie_id) AS movie_count\n    FROM ratings r\n    JOIN movie_ratings mr ON r.rating_id = mr.rating_id\n    JOIN movies m ON mr.movie_id = m.movie_id\n    GROUP BY r.rating_category\n),\ndecade_trends AS (\n    SELECT \n        CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's' AS decade,\n        COUNT(m.movie_id) AS movies_in_decade,\n        ROUND(AVG(m.popularity), 2) AS avg_popularity\n    FROM movies m\n    WHERE m.popularity IS NOT NULL\n        AND SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n        AND CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) >= 1980\n    GROUP BY CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's'\n    HAVING COUNT(m.movie_id) >= 50\n),\nlanguage_diversity AS (\n    SELECT \n        CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's' AS decade,\n        COUNT(DISTINCT l.language_id) AS unique_languages\n    FROM movies m\n    JOIN movie_languages ml ON m.movie_id = ml.movie_id\n    JOIN languages l ON ml.language_id = l.language_id\n    WHERE SUBSTR(m.release_date, 1, 4) ~ '^[0-9]{4}$'\n        AND CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) >= 1980\n    GROUP BY CAST((CAST(SUBSTR(m.release_date, 1, 4) AS INTEGER) / 10) * 10 AS VARCHAR) || 's'\n)\nSELECT \n    dt.decade,\n    dt.movies_in_decade,\n    dt.avg_popularity,\n    ld.unique_languages,\n    (SELECT rating_category FROM rating_distribution ORDER BY movie_count DESC LIMIT 1) AS most_common_rating\nFROM decade_trends dt\nJOIN language_diversity ld ON dt.decade = ld.decade\nORDER BY dt.decade;",
      "topics": [
        "Multiple CTEs",
        "Subqueries in SELECT",
        "Aggregate functions",
        "ORDER BY with LIMIT",
        "Complex multi-table analysis"
      ],
      "difficulty": "Hard",
      "result": {
        "working": true,
        "execution_time": 0.008,
        "row_count": 39,
        "columns": [
          "decade",
          "movies_in_decade",
          "avg_popularity",
          "unique_languages",
          "most_common_rating"
        ],
        "sample_results": [
          {
            "decade": "1984.0s",
            "movies_in_decade": "52",
            "avg_popularity": "23.61",
            "unique_languages": "4",
            "most_common_rating": "Good"
          },
          {
            "decade": "1985.0s",
            "movies_in_decade": "74",
            "avg_popularity": "22.17",
            "unique_languages": "7",
            "most_common_rating": "Good"
          },
          {
            "decade": "1986.0s",
            "movies_in_decade": "66",
            "avg_popularity": "29.81",
            "unique_languages": "7",
            "most_common_rating": "Good"
          }
        ],
        "error": null
      }
    }
  ]
}
