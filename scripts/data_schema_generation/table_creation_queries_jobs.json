{
    "metadata": {
      "description": "Child tables optimized for Week 4 JOIN practice - INNER JOIN and LEFT JOIN concepts",
      "target_week": 4,
      "core_concepts": ["Primary/foreign keys", "INNER JOIN", "LEFT JOIN", "ON clause", "Table aliases"],
      "dataset_source": "data_jobs.db",
      "educational_focus": "Understanding JOIN differences and NULL handling",
      "complexity_level": "beginner"
    },
    "tables": {
      "job_categories": {
        "description": "Simple lookup table for job title categories - perfect for first JOIN practice",
        "educational_purpose": "Demonstrates basic INNER JOIN concept with small, manageable dataset",
        "row_count_estimate": 10,
        "query": "CREATE TABLE job_categories AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_title_short) as category_id,\n    job_title_short as category_name,\n    CASE \n        WHEN job_title_short LIKE '%Senior%' THEN 'Senior Level'\n        WHEN job_title_short LIKE '%Machine Learning%' THEN 'Specialized'\n        ELSE 'Standard Level'\n    END as experience_level,\n    CASE\n        WHEN job_title_short IN ('Data Scientist', 'Senior Data Scientist', 'Machine Learning Engineer') THEN 'Science'\n        WHEN job_title_short IN ('Data Engineer', 'Senior Data Engineer', 'Cloud Engineer') THEN 'Engineering' \n        WHEN job_title_short IN ('Data Analyst', 'Senior Data Analyst', 'Business Analyst') THEN 'Analytics'\n        ELSE 'Technical'\n    END as job_family\nFROM (\n    SELECT DISTINCT job_title_short \n    FROM jobs \n    WHERE job_title_short IS NOT NULL\n) t\nORDER BY category_name;"
      },
      "employment_types": {
        "description": "Lookup table for job schedule types with business context",
        "educational_purpose": "Demonstrates JOIN with moderate-sized lookup table and introduces NULL handling",
        "row_count_estimate": 47,
        "query": "CREATE TABLE employment_types AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_schedule_type) as employment_type_id,\n    job_schedule_type as type_name,\n    CASE \n        WHEN job_schedule_type = 'Full-time' THEN 'Permanent'\n        WHEN job_schedule_type = 'Part-time' THEN 'Permanent'\n        WHEN job_schedule_type = 'Contractor' THEN 'Temporary'\n        WHEN job_schedule_type = 'Internship' THEN 'Training'\n        WHEN job_schedule_type LIKE '%Temp%' THEN 'Temporary'\n        ELSE 'Other'\n    END as employment_class,\n    CASE\n        WHEN job_schedule_type = 'Full-time' THEN 40\n        WHEN job_schedule_type = 'Part-time' THEN 20\n        WHEN job_schedule_type = 'Contractor' THEN 40\n        WHEN job_schedule_type = 'Internship' THEN 32\n        ELSE NULL\n    END as typical_hours_per_week\nFROM (\n    SELECT DISTINCT job_schedule_type \n    FROM jobs \n    WHERE job_schedule_type IS NOT NULL\n) t\nORDER BY type_name;"
      },
      "countries": {
        "description": "Country dimension separate from full location data",
        "educational_purpose": "Demonstrates JOIN with medium-sized table and geographical analysis",
        "row_count_estimate": 160,
        "query": "CREATE TABLE countries AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_country) as country_id,\n    job_country as country_name,\n    CASE \n        WHEN job_country = 'United States' THEN 'North America'\n        WHEN job_country IN ('United Kingdom', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands') THEN 'Europe'\n        WHEN job_country IN ('India', 'Singapore', 'Japan') THEN 'Asia'\n        WHEN job_country IN ('Australia', 'New Zealand') THEN 'Oceania'\n        ELSE 'Other'\n    END as region,\n    CASE\n        WHEN job_country = 'United States' THEN 'USD'\n        WHEN job_country IN ('Germany', 'France', 'Spain', 'Italy', 'Netherlands') THEN 'EUR'\n        WHEN job_country = 'United Kingdom' THEN 'GBP'\n        WHEN job_country = 'India' THEN 'INR'\n        WHEN job_country = 'Singapore' THEN 'SGD'\n        ELSE NULL\n    END as primary_currency\nFROM (\n    SELECT DISTINCT job_country \n    FROM locations \n    WHERE job_country IS NOT NULL\n) t\nORDER BY country_name;"
      },
      "company_tiers": {
        "description": "Categorizes companies by their job posting activity and size",
        "educational_purpose": "Demonstrates calculated JOINs and business categorization logic",
        "row_count_estimate": 4,
        "query": "CREATE TABLE company_tiers AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY min_postings) as tier_id,\n    tier_name,\n    min_postings,\n    max_postings,\n    description\nFROM (\n    VALUES \n        ('Large Enterprise', 100, 99999, 'Companies with 100+ job postings'),\n        ('Medium Company', 20, 99, 'Companies with 20-99 job postings'),\n        ('Small Company', 5, 19, 'Companies with 5-19 job postings'),\n        ('Startup/Small Business', 1, 4, 'Companies with 1-4 job postings')\n) AS t(tier_name, min_postings, max_postings, description)\nORDER BY min_postings DESC;"
      },
      "remote_work_policies": {
        "description": "Lookup table for remote work arrangements",
        "educational_purpose": "Simple binary lookup that demonstrates LEFT JOIN NULL handling",
        "row_count_estimate": 3,
        "query": "CREATE TABLE remote_work_policies AS\nSELECT \n    policy_id,\n    is_remote,\n    policy_name,\n    policy_description\nFROM (\n    VALUES \n        (1, TRUE, 'Remote Friendly', 'Position allows remote work'),\n        (2, FALSE, 'On-site Required', 'Position requires office presence'),\n        (3, NULL, 'Hybrid/Flexible', 'Remote work policy not specified')\n) AS t(policy_id, is_remote, policy_name, policy_description);"
      }
    },
    "educational_queries": {
      "beginner_inner_join": {
        "description": "Basic INNER JOIN between jobs and job_categories",
        "example": "SELECT j.job_title, jc.category_name, jc.experience_level\nFROM jobs j\nINNER JOIN job_categories jc ON j.job_title_short = jc.category_name\nLIMIT 10;"
      },
      "left_join_with_nulls": {
        "description": "LEFT JOIN showing NULL handling when some jobs don't have employment type",
        "example": "SELECT j.job_title, et.type_name, et.typical_hours_per_week\nFROM jobs j\nLEFT JOIN employment_types et ON j.job_schedule_type = et.type_name\nWHERE et.type_name IS NULL\nLIMIT 10;"
      },
      "multi_table_join": {
        "description": "Multiple JOINs combining several lookup tables",
        "example": "SELECT j.job_title, jc.job_family, c.region, et.employment_class\nFROM jobs j\nINNER JOIN job_categories jc ON j.job_title_short = jc.category_name\nLEFT JOIN countries c ON j.job_country = c.country_name\nLEFT JOIN employment_types et ON j.job_schedule_type = et.type_name\nLIMIT 10;"
      }
    },
    "learning_progression": [
      "1. Start with job_categories (smallest table) for first INNER JOIN practice",
      "2. Practice LEFT JOIN with employment_types to understand NULL handling", 
      "3. Use countries table for geographical analysis JOINs",
      "4. Combine multiple tables in complex JOIN scenarios",
      "5. Use company_tiers for calculated JOIN conditions"
    ]
  }