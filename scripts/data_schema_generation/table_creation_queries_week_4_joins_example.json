{
  "metadata": {
    "description": "SQL queries for creating normalized tables from the original data jobs dataset",
    "source": "data_jobs.db normalization process",
    "approach": "Dimensional modeling with fact table and dimension tables"
  },
  "queries": {
    "companies": {
      "description": "Extract unique companies from original dataset",
      "query": "CREATE TABLE companies AS\nSELECT DISTINCT \n    ROW_NUMBER() OVER (ORDER BY company_name) as company_id,\n    company_name\nFROM raw_jobs_data \nWHERE company_name IS NOT NULL\nORDER BY company_name;"
    },
    "locations": {
      "description": "Extract unique locations from original dataset",
      "query": "CREATE TABLE locations AS\nSELECT DISTINCT\n    ROW_NUMBER() OVER (ORDER BY job_location, job_country) as location_id,\n    job_location,\n    job_country\nFROM raw_jobs_data\nWHERE job_location IS NOT NULL\nORDER BY job_country, job_location;"
    },
    "platforms": {
      "description": "Extract unique platforms from original dataset",
      "query": "CREATE TABLE platforms AS\nSELECT DISTINCT\n    ROW_NUMBER() OVER (ORDER BY job_via) as platform_id,\n    job_via as platform_name\nFROM raw_jobs_data\nWHERE job_via IS NOT NULL\nORDER BY job_via;"
    },
    "jobs": {
      "description": "Main jobs table with foreign key references to dimension tables",
      "query": "CREATE TABLE jobs AS\nSELECT \n    j.job_id,\n    c.company_id,\n    l.location_id, \n    p.platform_id,\n    j.job_title_short,\n    j.job_title,\n    j.job_schedule_type,\n    j.job_work_from_home,\n    j.job_posted_date,\n    j.job_no_degree_mention,\n    j.job_health_insurance,\n    j.salary_rate,\n    j.salary_year_avg,\n    j.salary_hour_avg\nFROM raw_jobs_data j\nLEFT JOIN companies c ON j.company_name = c.company_name\nLEFT JOIN locations l ON j.job_location = l.job_location AND j.job_country = l.job_country  \nLEFT JOIN platforms p ON j.job_via = p.platform_name;"
    },
    "skills": {
      "description": "Predefined skills taxonomy for data analytics roles",
      "query": "CREATE TABLE skills AS\nSELECT skill_id, skill_name, skill_category\nFROM (VALUES \n    (1, 'Python', 'programming'),\n    (2, 'SQL', 'programming'), \n    (3, 'R', 'programming'),\n    (4, 'Excel', 'analyst_tools'),\n    (5, 'Tableau', 'analyst_tools'),\n    (6, 'Power BI', 'analyst_tools'),\n    (7, 'AWS', 'cloud'),\n    (8, 'Azure', 'cloud'),\n    (9, 'GCP', 'cloud'),\n    (10, 'Spark', 'big_data'),\n    (11, 'Hadoop', 'big_data'),\n    (12, 'Docker', 'devops'),\n    (13, 'Kubernetes', 'devops'),\n    (14, 'Git', 'devops'),\n    (15, 'Machine Learning', 'analytics')\n) AS t(skill_id, skill_name, skill_category);"
    },
    "job_skills": {
      "description": "Junction table linking jobs to required skills (many-to-many relationship)",
      "query": "CREATE TABLE job_skills AS\nSELECT DISTINCT\n    j.job_id,\n    s.skill_id\nFROM jobs j\nCROSS JOIN skills s\nWHERE \n    -- Pattern matching job descriptions/titles for skill requirements\n    LOWER(j.job_title) LIKE '%' || LOWER(s.skill_name) || '%'\n    OR LOWER(j.job_title_short) LIKE '%' || LOWER(s.skill_name) || '%'\n    -- Additional skill detection logic would be applied here\nORDER BY j.job_id, s.skill_id;"
    }
  }
} 