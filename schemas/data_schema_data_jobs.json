{
  "metadata": {
    "database_name": "data_data_jobs.db",
    "description": "Comprehensive job market database designed for SQL JOIN practice. Contains real job posting data from multiple platforms, normalized into educational tables with carefully designed relationships. Features both original normalized tables (companies, jobs, skills) and educational lookup tables (job_categories, employment_types, countries, etc.) with varying complexity levels and intentional NULL values for LEFT JOIN practice.",
    "total_tables": 11,
    "total_records": 987537,
    "source": "Luke Barousse's job postings dataset (lukebarousse/data_jobs) from HuggingFace, enhanced with educational lookup tables",
    "generation_date": "2025-07-11",
    "use_cases": [
      "Week 4 SQL curriculum: Practice INNER JOIN and LEFT JOIN operations",
      "Understanding primary/foreign key relationships in normalized databases",
      "Exploring NULL handling in LEFT JOIN scenarios",
      "Business intelligence queries on job market data",
      "Data analysis projects combining multiple related datasets"
    ],
    "target_week": 4,
    "core_concepts": [
      "Primary/foreign keys",
      "INNER JOIN",
      "LEFT JOIN",
      "ON clause",
      "Table aliases"
    ],
    "educational_focus": "Understanding JOIN differences and NULL handling",
    "complexity_level": "beginner"
  },
  "tables": [
    {
      "id": 1,
      "name": "companies",
      "description": "Master table containing all unique companies that have posted job openings. Serves as the primary dimension table for company-related analysis and demonstrates one-to-many relationships with jobs.",
      "creation_query": "",
      "row_count": 139983,
      "columns": [
        {
          "name": "company_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "",
          "description": "Unique identifier for each company. Primary key used to establish relationships with jobs table."
        },
        {
          "name": "company_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Official name of the company. May contain NULLs for data quality issues, demonstrating real-world data challenges."
        }
      ],
      "sample_data": [
        {
          "company_id": "1",
          "company_name": "Boehringer Ingelheim"
        },
        {
          "company_id": "2",
          "company_name": "Hewlett Packard Enterprise"
        },
        {
          "company_id": "3",
          "company_name": "ALPHA Augmented Services"
        }
      ],
      "educational_purpose": "Foundation table for practicing basic INNER JOINs. Students learn to connect company information with job postings and understand one-to-many relationships."
    },
    {
      "id": 2,
      "name": "company_tiers",
      "description": "Educational lookup table categorizing companies by their hiring volume (number of job postings). Contains business logic for classifying companies from startups to enterprises, demonstrating calculated JOINs and business categorization.",
      "creation_query": "CREATE TABLE company_tiers AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY min_postings) as tier_id,\n    tier_name,\n    min_postings,\n    max_postings,\n    description\nFROM (\n    VALUES \n        ('Large Enterprise', 100, 99999, 'Companies with 100+ job postings'),\n        ('Medium Company', 20, 99, 'Companies with 20-99 job postings'),\n        ('Small Company', 5, 19, 'Companies with 5-19 job postings'),\n        ('Startup/Small Business', 1, 4, 'Companies with 1-4 job postings')\n) AS t(tier_name, min_postings, max_postings, description)\nORDER BY min_postings DESC;",
      "row_count": 4,
      "columns": [
        {
          "name": "tier_id",
          "type": "BIGINT",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Unique identifier for each company tier. Used for joining with calculated company posting counts."
        },
        {
          "name": "tier_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Business-friendly name for the company tier (e.g., 'Large Enterprise', 'Startup/Small Business')."
        },
        {
          "name": "min_postings",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Minimum number of job postings to qualify for this tier. Used in range-based JOIN conditions."
        },
        {
          "name": "max_postings",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Maximum number of job postings to qualify for this tier. Used in range-based JOIN conditions."
        },
        {
          "name": "description",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Human-readable description of the company tier criteria and typical characteristics."
        }
      ],
      "sample_data": [
        {
          "tier_id": "4",
          "tier_name": "Large Enterprise",
          "min_postings": "100",
          "max_postings": "99999",
          "description": "Companies with 100+ job postings"
        },
        {
          "tier_id": "3",
          "tier_name": "Medium Company",
          "min_postings": "20",
          "max_postings": "99",
          "description": "Companies with 20-99 job postings"
        },
        {
          "tier_id": "2",
          "tier_name": "Small Company",
          "min_postings": "5",
          "max_postings": "19",
          "description": "Companies with 5-19 job postings"
        }
      ],
      "educational_purpose": "Advanced JOIN practice requiring calculated fields and range-based conditions. Students learn to JOIN tables using complex criteria (BETWEEN clauses) and understand business logic implementation in database design."
    },
    {
      "id": 3,
      "name": "countries",
      "description": "Geographic lookup table containing countries where job postings are located, enhanced with regional groupings and currency information. Demonstrates geographic analysis capabilities and medium-complexity JOINs.",
      "creation_query": "CREATE TABLE countries AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_country) as country_id,\n    job_country as country_name,\n    CASE \n        WHEN job_country = 'United States' THEN 'North America'\n        WHEN job_country IN ('United Kingdom', 'Germany', 'France', 'Spain', 'Italy', 'Netherlands') THEN 'Europe'\n        WHEN job_country IN ('India', 'Singapore', 'Japan') THEN 'Asia'\n        WHEN job_country IN ('Australia', 'New Zealand') THEN 'Oceania'\n        ELSE 'Other'\n    END as region,\n    CASE\n        WHEN job_country = 'United States' THEN 'USD'\n        WHEN job_country IN ('Germany', 'France', 'Spain', 'Italy', 'Netherlands') THEN 'EUR'\n        WHEN job_country = 'United Kingdom' THEN 'GBP'\n        WHEN job_country = 'India' THEN 'INR'\n        WHEN job_country = 'Singapore' THEN 'SGD'\n        ELSE NULL\n    END as primary_currency\nFROM (\n    SELECT DISTINCT job_country \n    FROM locations \n    WHERE job_country IS NOT NULL\n) t\nORDER BY country_name;",
      "row_count": 160,
      "columns": [
        {
          "name": "country_id",
          "type": "BIGINT",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Unique identifier for each country. Generated using ROW_NUMBER() for consistent ordering."
        },
        {
          "name": "country_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Official name of the country where job postings are located. Extracted from original location data."
        },
        {
          "name": "region",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Geographic region classification (North America, Europe, Asia, Oceania, Other). Demonstrates CASE statement logic in table creation."
        },
        {
          "name": "primary_currency",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Primary currency used in the country (USD, EUR, GBP, etc.). Contains intentional NULLs for LEFT JOIN practice with less common countries."
        }
      ],
      "sample_data": [
        {
          "country_id": "1",
          "country_name": "Afghanistan",
          "region": "Other",
          "primary_currency": "None"
        },
        {
          "country_id": "2",
          "country_name": "Albania",
          "region": "Other",
          "primary_currency": "None"
        },
        {
          "country_id": "3",
          "country_name": "Algeria",
          "region": "Other",
          "primary_currency": "None"
        }
      ],
      "educational_purpose": "Geographic analysis and medium-complexity JOINs. Students practice joining location data with country information, learn to handle NULL values in currency fields, and understand regional grouping strategies."
    },
    {
      "id": 4,
      "name": "employment_types",
      "description": "Educational lookup table for job schedule types (Full-time, Part-time, Contractor, etc.) with business classification and working hours. Intentionally includes varied data with NULLs to demonstrate LEFT JOIN behavior and NULL handling.",
      "creation_query": "CREATE TABLE employment_types AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_schedule_type) as employment_type_id,\n    job_schedule_type as type_name,\n    CASE \n        WHEN job_schedule_type = 'Full-time' THEN 'Permanent'\n        WHEN job_schedule_type = 'Part-time' THEN 'Permanent'\n        WHEN job_schedule_type = 'Contractor' THEN 'Temporary'\n        WHEN job_schedule_type = 'Internship' THEN 'Training'\n        WHEN job_schedule_type LIKE '%Temp%' THEN 'Temporary'\n        ELSE 'Other'\n    END as employment_class,\n    CASE\n        WHEN job_schedule_type = 'Full-time' THEN 40\n        WHEN job_schedule_type = 'Part-time' THEN 20\n        WHEN job_schedule_type = 'Contractor' THEN 40\n        WHEN job_schedule_type = 'Internship' THEN 32\n        ELSE NULL\n    END as typical_hours_per_week\nFROM (\n    SELECT DISTINCT job_schedule_type \n    FROM jobs \n    WHERE job_schedule_type IS NOT NULL\n) t\nORDER BY type_name;",
      "row_count": 47,
      "columns": [
        {
          "name": "employment_type_id",
          "type": "BIGINT",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "References employment_types.employment_type_id",
          "description": "Unique identifier for each employment type. Generated sequentially for consistent ordering."
        },
        {
          "name": "type_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Original job schedule type name from the dataset (Full-time, Part-time, Contractor, etc.). Preserves original data values."
        },
        {
          "name": "employment_class",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Business classification of employment type (Permanent, Temporary, Training, Other). Demonstrates CASE statement logic and business categorization."
        },
        {
          "name": "typical_hours_per_week",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Typical working hours per week for this employment type. Contains intentional NULLs for complex/uncommon employment types to demonstrate LEFT JOIN NULL handling."
        }
      ],
      "sample_data": [
        {
          "employment_type_id": "1",
          "type_name": "Contractor",
          "employment_class": "Temporary",
          "typical_hours_per_week": "40.0"
        },
        {
          "employment_type_id": "2",
          "type_name": "Contractor and Full-time",
          "employment_class": "Other",
          "typical_hours_per_week": "nan"
        },
        {
          "employment_type_id": "3",
          "type_name": "Contractor and Internship",
          "employment_class": "Other",
          "typical_hours_per_week": "nan"
        }
      ],
      "educational_purpose": "Perfect for LEFT JOIN practice with NULL handling. Students learn how LEFT JOINs behave when lookup tables contain NULL values, and practice filtering/handling missing data in business scenarios."
    },
    {
      "id": 5,
      "name": "job_categories",
      "description": "Small, manageable lookup table for job title categories with business classification. Designed as the perfect starting point for basic INNER JOIN practice with clear, intuitive relationships.",
      "creation_query": "CREATE TABLE job_categories AS\nSELECT \n    ROW_NUMBER() OVER (ORDER BY job_title_short) as category_id,\n    job_title_short as category_name,\n    CASE \n        WHEN job_title_short LIKE '%Senior%' THEN 'Senior Level'\n        WHEN job_title_short LIKE '%Machine Learning%' THEN 'Specialized'\n        ELSE 'Standard Level'\n    END as experience_level,\n    CASE\n        WHEN job_title_short IN ('Data Scientist', 'Senior Data Scientist', 'Machine Learning Engineer') THEN 'Science'\n        WHEN job_title_short IN ('Data Engineer', 'Senior Data Engineer', 'Cloud Engineer') THEN 'Engineering' \n        WHEN job_title_short IN ('Data Analyst', 'Senior Data Analyst', 'Business Analyst') THEN 'Analytics'\n        ELSE 'Technical'\n    END as job_family\nFROM (\n    SELECT DISTINCT job_title_short \n    FROM jobs \n    WHERE job_title_short IS NOT NULL\n) t\nORDER BY category_name;",
      "row_count": 10,
      "columns": [
        {
          "name": "category_id",
          "type": "BIGINT",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Unique identifier for each job category. Simple integer sequence for easy JOIN practice."
        },
        {
          "name": "category_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Simplified job title category (Data Analyst, Data Scientist, etc.). Matches job_title_short field in jobs table for straightforward JOINs."
        },
        {
          "name": "experience_level",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Experience level classification (Senior Level, Specialized, Standard Level). Derived from job title patterns using CASE statements."
        },
        {
          "name": "job_family",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "High-level job family grouping (Science, Engineering, Analytics, Technical). Useful for aggregation and GROUP BY practice."
        }
      ],
      "sample_data": [
        {
          "category_id": "1",
          "category_name": "Business Analyst",
          "experience_level": "Standard Level",
          "job_family": "Analytics"
        },
        {
          "category_id": "2",
          "category_name": "Cloud Engineer",
          "experience_level": "Standard Level",
          "job_family": "Engineering"
        },
        {
          "category_id": "3",
          "category_name": "Data Analyst",
          "experience_level": "Standard Level",
          "job_family": "Analytics"
        }
      ],
      "educational_purpose": "Introduction to INNER JOINs with a small, manageable dataset. Perfect first JOIN exercise where students learn basic ON clause syntax and understand one-to-many relationships between jobs and categories."
    },
    {
      "id": 6,
      "name": "job_skills",
      "description": "Junction table implementing many-to-many relationship between jobs and skills. Demonstrates advanced JOIN concepts where one job can have multiple skills and one skill can belong to multiple jobs.",
      "creation_query": "",
      "row_count": 35125,
      "columns": [
        {
          "name": "job_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References jobs.job_id",
          "description": "Foreign key reference to jobs table. Part of composite primary key implementing many-to-many relationship."
        },
        {
          "name": "skill_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References skills.skill_id",
          "description": "Foreign key reference to skills table. Part of composite primary key implementing many-to-many relationship."
        }
      ],
      "sample_data": [
        {
          "job_id": "1",
          "skill_id": "1"
        },
        {
          "job_id": "1",
          "skill_id": "12"
        },
        {
          "job_id": "2",
          "skill_id": "4"
        }
      ],
      "educational_purpose": "Advanced many-to-many JOIN practice. Students learn to join three tables (jobs, job_skills, skills) and understand junction table concepts, composite primary keys, and complex relationship modeling."
    },
    {
      "id": 7,
      "name": "jobs",
      "description": "Main fact table containing all job postings. Central hub for all relationships, connecting to companies, locations, platforms, and skills. Represents the core business entity around which all JOINs revolve.",
      "creation_query": "",
      "row_count": 785741,
      "columns": [
        {
          "name": "job_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References jobs.job_id",
          "description": "Unique identifier for each job posting. Primary key connecting to skills through job_skills junction table."
        },
        {
          "name": "company_id",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Foreign key reference to companies table. Links job postings to their hiring companies for JOIN practice."
        },
        {
          "name": "location_id",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "References locations.location_id",
          "description": "Foreign key reference to locations table. Enables geographic analysis and location-based JOINs."
        },
        {
          "name": "platform_id",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "References platforms.platform_id",
          "description": "Foreign key reference to platforms table. Tracks job posting source for data attribution analysis."
        },
        {
          "name": "job_title_short",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Standardized job title category (Data Analyst, Data Scientist, etc.). Used for JOINs with job_categories table."
        },
        {
          "name": "job_title",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Full job title as posted by the employer. Contains detailed position descriptions and requirements."
        },
        {
          "name": "job_schedule_type",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Employment schedule type (Full-time, Part-time, Contractor, etc.). Links to employment_types table for JOIN exercises."
        },
        {
          "name": "job_work_from_home",
          "type": "BOOLEAN",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Boolean indicator for remote work availability. Can be joined with remote_work_policies table for policy analysis."
        },
        {
          "name": "job_posted_date",
          "type": "TIMESTAMP",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Date and time when job was posted. Useful for temporal analysis and date-based filtering in JOIN queries."
        },
        {
          "name": "job_no_degree_mention",
          "type": "BOOLEAN",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Boolean indicator for whether job posting mentions degree requirements. Useful for education requirement analysis."
        },
        {
          "name": "job_health_insurance",
          "type": "BOOLEAN",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Boolean indicator for health insurance benefits. Demonstrates benefit analysis and boolean data handling in JOINs."
        },
        {
          "name": "salary_rate",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Salary rate type (yearly, hourly, etc.). Contains many NULLs providing excellent LEFT JOIN practice scenarios."
        },
        {
          "name": "salary_year_avg",
          "type": "DECIMAL(10,2)",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Average annual salary for the position. Useful for salary analysis and numeric aggregation in JOIN queries."
        },
        {
          "name": "salary_hour_avg",
          "type": "DECIMAL(8,2)",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Average hourly salary for the position. Demonstrates handling of different salary structures in data analysis."
        }
      ],
      "sample_data": [
        {
          "job_id": "1",
          "company_id": "1",
          "location_id": "1",
          "platform_id": "1",
          "job_title_short": "Senior Data Engineer",
          "job_title": "Senior Clinical Data Engineer / Principal Clinical Data Engineer ...",
          "job_schedule_type": "Full-time",
          "job_work_from_home": "False",
          "job_posted_date": "2023-06-16 13:44:15",
          "job_no_degree_mention": "False",
          "job_health_insurance": "False",
          "salary_rate": "None",
          "salary_year_avg": "None",
          "salary_hour_avg": "None"
        },
        {
          "job_id": "2",
          "company_id": "2",
          "location_id": "2",
          "platform_id": "2",
          "job_title_short": "Data Analyst",
          "job_title": "Data Analyst",
          "job_schedule_type": "Full-time",
          "job_work_from_home": "False",
          "job_posted_date": "2023-01-14 13:18:07",
          "job_no_degree_mention": "False",
          "job_health_insurance": "False",
          "salary_rate": "None",
          "salary_year_avg": "None",
          "salary_hour_avg": "None"
        },
        {
          "job_id": "3",
          "company_id": "3",
          "location_id": "3",
          "platform_id": "3",
          "job_title_short": "Data Engineer",
          "job_title": "Data Engineer/Scientist/Analyst, Mid or Senior (m/f/x)",
          "job_schedule_type": "Full-time",
          "job_work_from_home": "False",
          "job_posted_date": "2023-10-10 13:14:55",
          "job_no_degree_mention": "False",
          "job_health_insurance": "False",
          "salary_rate": "None",
          "salary_year_avg": "None",
          "salary_hour_avg": "None"
        }
      ],
      "educational_purpose": "Central fact table for all JOIN operations. Students practice connecting jobs with companies, locations, platforms, and skills. Demonstrates real-world data complexity with multiple foreign keys and business attributes."
    },
    {
      "id": 8,
      "name": "locations",
      "description": "Geographic dimension table containing job locations with city and country information. Essential for location-based analysis and geographic JOINs with jobs table.",
      "creation_query": "",
      "row_count": 18545,
      "columns": [
        {
          "name": "location_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References locations.location_id",
          "description": "Unique identifier for each location. Primary key used for JOINs with jobs table and educational geographic analysis."
        },
        {
          "name": "job_location",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Full location description (city, state/province, country). Used for detailed geographic analysis and location-based filtering."
        },
        {
          "name": "job_country",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Country name where job is located. Can be joined with countries table for regional analysis and currency information."
        }
      ],
      "sample_data": [
        {
          "location_id": "1",
          "job_location": "Watertown, CT",
          "job_country": "United States"
        },
        {
          "location_id": "2",
          "job_location": "Guadalajara, Jalisco, Mexico",
          "job_country": "Mexico"
        },
        {
          "location_id": "3",
          "job_location": "Berlin, Germany",
          "job_country": "Germany"
        }
      ],
      "educational_purpose": "Geographic JOIN practice with medium-sized dimension table. Students learn to join job data with location information and practice working with hierarchical geographic data (city, country)."
    },
    {
      "id": 9,
      "name": "platforms",
      "description": "Job platform dimension table showing where job postings originated (LinkedIn, Indeed, etc.). Demonstrates simple lookup table JOINs and data source tracking.",
      "creation_query": "",
      "row_count": 7904,
      "columns": [
        {
          "name": "platform_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References platforms.platform_id",
          "description": "Unique identifier for each job posting platform. Primary key used for JOINs with jobs table to track data sources."
        },
        {
          "name": "platform_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Name of the job posting platform (LinkedIn, Indeed, etc.). Used for analyzing job posting distribution across platforms."
        }
      ],
      "sample_data": [
        {
          "platform_id": "1",
          "platform_name": "via Work Nearby"
        },
        {
          "platform_id": "2",
          "platform_name": "via BeBee México"
        },
        {
          "platform_id": "3",
          "platform_name": "via LinkedIn"
        }
      ],
      "educational_purpose": "Simple lookup table JOIN practice. Students learn basic foreign key relationships between jobs and platforms, understanding data source attribution in business contexts."
    },
    {
      "id": 10,
      "name": "remote_work_policies",
      "description": "Educational binary lookup table for remote work policies. Specifically designed with intentional NULL values to demonstrate LEFT JOIN behavior when lookup data is missing.",
      "creation_query": "CREATE TABLE remote_work_policies AS\nSELECT \n    policy_id,\n    is_remote,\n    policy_name,\n    policy_description\nFROM (\n    VALUES \n        (1, TRUE, 'Remote Friendly', 'Position allows remote work'),\n        (2, FALSE, 'On-site Required', 'Position requires office presence'),\n        (3, NULL, 'Hybrid/Flexible', 'Remote work policy not specified')\n) AS t(policy_id, is_remote, policy_name, policy_description);",
      "row_count": 3,
      "columns": [
        {
          "name": "policy_id",
          "type": "INTEGER",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Unique identifier for each remote work policy. Used for JOINs with jobs table based on remote work status."
        },
        {
          "name": "is_remote",
          "type": "BOOLEAN",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Boolean indicator for remote work availability. Contains intentional NULLs for demonstrating LEFT JOIN NULL handling."
        },
        {
          "name": "policy_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Human-readable name for the remote work policy (Remote Friendly, On-site Required, etc.)."
        },
        {
          "name": "policy_description",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Detailed description of the remote work policy and its implications for job seekers."
        }
      ],
      "sample_data": [
        {
          "policy_id": "1",
          "is_remote": "True",
          "policy_name": "Remote Friendly",
          "policy_description": "Position allows remote work"
        },
        {
          "policy_id": "2",
          "is_remote": "False",
          "policy_name": "On-site Required",
          "policy_description": "Position requires office presence"
        },
        {
          "policy_id": "3",
          "is_remote": "None",
          "policy_name": "Hybrid/Flexible",
          "policy_description": "Remote work policy not specified"
        }
      ],
      "educational_purpose": "Perfect LEFT JOIN demonstration with intentional NULLs. Students learn how LEFT JOINs handle missing lookup data and practice filtering strategies for incomplete business data."
    },
    {
      "id": 11,
      "name": "skills",
      "description": "Skills dimension table containing technical and business skills referenced by jobs. Partners with job_skills junction table to demonstrate many-to-many relationships.",
      "creation_query": "",
      "row_count": 15,
      "columns": [
        {
          "name": "skill_id",
          "type": "INTEGER",
          "nullable": false,
          "primary_key": true,
          "foreign_key": "References skills.skill_id",
          "description": "Unique identifier for each skill. Primary key used for many-to-many JOINs with jobs through job_skills junction table."
        },
        {
          "name": "skill_name",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Name of the technical or business skill (Python, SQL, R, etc.). Used for skill-based job matching and analysis."
        },
        {
          "name": "skill_category",
          "type": "VARCHAR",
          "nullable": true,
          "primary_key": false,
          "foreign_key": "",
          "description": "Category classification for the skill (programming, database, analytics, etc.). Enables skill grouping and trend analysis."
        }
      ],
      "sample_data": [
        {
          "skill_id": "1",
          "skill_name": "Python",
          "skill_category": "programming"
        },
        {
          "skill_id": "2",
          "skill_name": "SQL",
          "skill_category": "programming"
        },
        {
          "skill_id": "3",
          "skill_name": "R",
          "skill_category": "programming"
        }
      ],
      "educational_purpose": "Many-to-many relationship foundation. Students learn to connect skills with jobs through junction tables, understanding how complex relationships are modeled in normalized databases."
    }
  ],
  "relationships": [
    {
      "type": "one-to-many",
      "from_table": "employment_types",
      "from_column": "employment_type_id",
      "to_table": "employment_types",
      "to_column": "employment_type_id",
      "description": "Self-referential relationship for employment type categorization - demonstrates lookup table design patterns"
    },
    {
      "type": "one-to-many",
      "from_table": "jobs",
      "from_column": "job_id",
      "to_table": "job_skills",
      "to_column": "job_id",
      "description": "Jobs can have multiple skills - one side of the many-to-many relationship through junction table"
    },
    {
      "type": "one-to-many",
      "from_table": "skills",
      "from_column": "skill_id",
      "to_table": "job_skills",
      "to_column": "skill_id",
      "description": "Skills can belong to multiple jobs - other side of the many-to-many relationship through junction table"
    },
    {
      "type": "one-to-many",
      "from_table": "jobs",
      "from_column": "job_id",
      "to_table": "jobs",
      "to_column": "job_id",
      "description": "Jobs table primary key relationship - central hub connecting to all dimension tables"
    },
    {
      "type": "one-to-many",
      "from_table": "locations",
      "from_column": "location_id",
      "to_table": "jobs",
      "to_column": "location_id",
      "description": "Each location can have multiple job postings - demonstrates geographic dimension relationships"
    },
    {
      "type": "one-to-many",
      "from_table": "platforms",
      "from_column": "platform_id",
      "to_table": "jobs",
      "to_column": "platform_id",
      "description": "Each platform can host multiple job postings - demonstrates data source tracking relationships"
    },
    {
      "type": "one-to-many",
      "from_table": "locations",
      "from_column": "location_id",
      "to_table": "locations",
      "to_column": "location_id",
      "description": "Location dimension table primary key - enables geographic analysis and country-level grouping"
    },
    {
      "type": "one-to-many",
      "from_table": "platforms",
      "from_column": "platform_id",
      "to_table": "platforms",
      "to_column": "platform_id",
      "description": "Platform dimension table primary key - tracks job posting sources and data provenance"
    },
    {
      "type": "one-to-many",
      "from_table": "skills",
      "from_column": "skill_id",
      "to_table": "skills",
      "to_column": "skill_id",
      "description": "Skills dimension table primary key - foundation for many-to-many job-skill relationships"
    }
  ],
  "schema_notes": [
    "Database contains 9 foreign key relationships ensuring referential integrity",
    "Junction tables detected: job_skills, jobs - implementing many-to-many relationships",
    "Normalization approach: 3NF design with fact table (jobs) and multiple dimension tables (companies, locations, platforms, skills) plus educational lookup tables for progressive learning complexity",
    "Business logic implementation: Educational tables include calculated fields (company_tiers), geographic hierarchies (countries), employment classifications (employment_types), and intentional NULL values for LEFT JOIN practice",
    "Performance optimization: Primary keys on all dimension tables, foreign key relationships clearly defined, junction table with composite primary key for efficient many-to-many queries"
  ],
  "agent_enhancement_needed": {
    "description": "The following fields need agent enhancement",
    "fields_to_enhance": [
      "metadata.description",
      "metadata.source",
      "metadata.use_cases",
      "tables[].description",
      "tables[].educational_purpose",
      "tables[].columns[].description",
      "relationships[].description",
      "schema_notes (empty strings)"
    ]
  }
}